nrow = number_simulations)
simulations1 <- matrix(runif(sample_size*number_simulations, max = real_theta),
nrow = number_simulations)
estimator_mean <- 2*apply(simulations1, 1, mean)
estimator_median <- 2*apply(simulations1, 1, median)
p1 <- hist(estimator_mean, breaks = 100)
p2 <- hist(estimator_median, breaks = 100)
range <- range(p1$mids, p2$mids )
p1$counts = p1$density
p2$counts = p2$density
pdf("histogram1.pdf")
plot( p1, col=rgb(1,0,0,1/4), xlim = range, xlab = "values", ylab = "density")
plot( p2, col=rgb(0,0,1,1/4), add = XXX)
plot( p2, col=rgb(0,0,1,1/4), add = TRUE)
dev.off()
?dev
?dev.off
plot( p1, col=rgb(1,0,0,1/4), xlim = range, xlab = "values", ylab = "density")
plot( p2, col=rgb(0,0,1,1/4), add = TRUE)
dev.off()
p1 <- hist(estimator_mean, breaks = 100)
p2 <- hist(estimator_median, breaks = 100)
simulations1 <- matrix(runif(sample_size, max = real_theta),
nrow = number_simulations)
estimator_mean <- 2*apply(simulations1, 1, mean)
estimator_median <- 2*apply(simulations1, 1, median)
p1 <- hist(estimator_mean, breaks = 100)
p2 <- hist(estimator_median, breaks = 100)
range <- range(p1$mids, p2$mids )
p1$counts = p1$density
p2$counts = p2$density
plot( p1, col=rgb(1,0,0,1/4), xlim = range, xlab = "values", ylab = "density")
plot( p2, col=rgb(0,0,1,1/4), add = TRUE)
simulations1 <- matrix(runif(sample_size*number_simulations, max = real_theta),
nrow = number_simulations)
estimator_mean <- 2*apply(simulations1, 1, mean)
estimator_median <- 2*apply(simulations1, 1, median)
p1 <- hist(estimator_mean, breaks = 100)
p2 <- hist(estimator_median, breaks = 100)
range <- range(p1$mids, p2$mids )
p1$counts = p1$density
p2$counts = p2$density
plot( p1, col=rgb(1,0,0,1/4), xlim = range, xlab = "values", ylab = "density")
plot( p2, col=rgb(0,0,1,1/4), add = TRUE)
estimator_mean_variance<- 2*apply(simulations1, 1, variance)
?apply
estimator_mean_variance<- 2*apply(simulations1, 1, var)
estimator_mean_variance
mean(estimator_mean_variance)
sample_size <- 1000
number_simulations <- 100000
simulations1 <- matrix(runif(sample_size*number_simulations, max = real_theta),
nrow = number_simulations)
estimator_mean_variance<- 2*apply(estimator_mean, 1, var)
estimator_mean_variance<- var(estimator_mean)
estimator_mean_variance
sample_size <- 100
number_simulations <- 100000
simulations1 <- matrix(runif(sample_size*number_simulations, max = real_theta),
nrow = number_simulations)
estimator_mean <- 2*apply(simulations1, 1, mean)
estimator_mean_variance<- var(estimator_mean)
estimator_mean_variance
sample_size <- 1000
number_simulations <- 100000
simulations1 <- matrix(runif(sample_size*number_simulations, max = real_theta),
nrow = number_simulations)
estimator_mean <- 2*apply(simulations1, 1, mean)
estimator_mean_variance<- var(estimator_mean)
estimator_mean_variance
p1 <- hist(estimator_mean, breaks = 100)
p2 <- hist(estimator_median, breaks = 100)
range <- range(p1$mids, p2$mids )
p1$counts = p1$density
p2$counts = p2$density
plot( p1, col=rgb(1,0,0,1/4), xlim = range, xlab = "values", ylab = "density")
plot( p2, col=rgb(0,0,1,1/4), add = TRUE)
dev.off()
p1 <- hist(estimator_mean, breaks = 100)
p2 <- hist(estimator_median, breaks = 100)
plot( p1, col=rgb(1,0,0,1/4), xlim = range, xlab = "values", ylab = "density")
plot( p2, col=rgb(0,0,1,1/4), add = TRUE)
View(simulations1)
runif(100,max=5)
matrix(runif(100,max=5),nrow=10)
matrix(runif(100,max=5),nrow=2)
matrix(runif(10,max=5),nrow=2)
matrix(runif(10,max=5),nrow=3)
matrix(runif(10,max=5),nrow=5)
?runif
estimator_mean <- 2*apply(simulations1, 1, mean)
estimator_mean_variance<- var(estimator_mean)
estimator_mean_variance
var(apply(simulations1, 1, mean))
matrix(1:150,nrow=30)
matrix(runif(150,max=150),nrow=30)
ax<-matrix(runif(150,max=150),nrow=30)
apply(ax,0,mean)
apply(ax,1,mean)
apply(ax,2,mean)
apply(ax,2,var)
rm(list=ls())
log(1/(1+exp(200)))
log(1/(1+exp(1)))
log(1/(1+exp(-500)))
log(1/(1+exp(-5)))
?norm
?rnorm
qnorm(0.975)
qnorm(0.025)
4*1,9599
4*1.9599
sqer(1000)
sqrtr(1000)
sqrt(1000)
rm(list = ls())
setwd("/Users/raz/Dropbox/14.31 edX Building the Course/Problem Sets/PSET 7")
theta <- 5
n <- 25
simul <- 1000
?apply
simul <- 1000
sample <- matrix(runif(1000*n, max = theta),
nrow = n)
thetahat <- (n+1)/n*apply(sample, 2, max)
ll <- thetahat/(0.95^(1/n)*(n+1)/n)
ul <- thetahat/(0.05^(1/n)*(n+1)/n)
thetain <- (theta>=ll & theta<=ul)
mean(thetain)
sample <- matrix(runif(1000*n, max = theta),
nrow = n)
thetahat <- (n+1)/n*apply(sample, 2, max)
ll <- thetahat/(0.95^(1/n)*(n+1)/n)
ul <- thetahat/(0.05^(1/n)*(n+1)/n)
thetain <- (theta>=ll & theta<=ul)
mean(thetain)
1.96*4
10-7.84
library(perm)
install.packages('perm')
library(perm)
rm(list = ls())
perms <- chooseMatrix(8,XXX)
?choseMatrix
?chooseMatrix
perms <- chooseMatrix(8,8)
perms
perms <- chooseMatrix(8,2)
perms
perms <- chooseMatrix(8,4)
perms
perms <- chooseMatrix(8,4)
A <- matrix(c(0.462, 0.731, 0.571, 0.923, 0.333, 0.750, 0.893, 0.692), nrow=8, ncol=1, byrow=TRUE)
treatment_avg <- (1/4)*perms%*%A
control_avg <- (1/4)*(1-perms)%*%A
test_statistic <- abs(treatment_avg-control_avg)
rownumber <- apply(apply(perms, 1,
function(x) (x == c(0, 1, 0, 0, 0, 1, 1, 1))),
2, sum)
rownumber <- (rownumber == 8)
observed_test <- test_statistic[rownumber == TRUE]
sum(test_statistic)
avg(test_statistic)
mean(test_statistic)
observed_test <- test_statistic[rownumber == TRUE]
per1<-c(0, 1, 0, 0, 0, 1, 1, 1)
treatment_avg1 <- (1/4)*per1%*%A
control_avg1 <- (1/4)*(1-per1)%*%A
test_statistic1 <- abs(treatment_avg1-control_avg1)
test_statistic1
test_larger<-test_statistic>test_statistic1
test_larger<-test_statistic>0.19425
test_larger
sum(test_larger)
test_larger<-test_statistic>=0.19425
sum(test_larger)
test_statistic
test_larger<-test_statistic=>0.19425
test_larger<-test_statistic>=0.19425
test_statistic
test_larger
sum(test_larger)
test_larger<-test_statistic>=0.19424
sum(test_larger)
16/70
1-16/70
?round
round(16/70,digits=3)
larger_than_observed <- (test_statistic >= 0.19425)
sum(larger_than_observed)
df <- data.frame(perms,control_avg,treatment_avg,test_statistic)
simul_stat <- as.vector(NULL)
schools <- read.csv('teachers_final.csv')
pwd
swd
dir
getwd()
cd d:
cd d:
setwd("d:\quant\Data Analysis for Social Science")
setwd("d:\\quant\Data Analysis for Social Science")
setwd("D:\\quant\Data Analysis for Social Science")
schools <- read.csv('D:\\quant\Data Analysis for Social Science\teachers_final.csv')
schools <- read.csv('D:\\quant\teachers_final.csv')
schools <- read.csv('D:\quant\teachers_final.csv')
schools <- read.csv('D:\Quant\teachers_final.csv')
schools <- read.csv('D:\\Quant\teachers_final.csv')
schools <- read.csv('D:\\Quant\\teachers_final.csv')
set.seed(1001)
for(i in 1:100) {
print(i)
schools$rand <- runif(100,min=0,max=1)
schools$treatment_rand <- as.numeric(rank(schools$rand)<=49)
schools$control_rand = 1-schools$treatment_rand
simul_stat <-append(simul_stat,
sum(schools$treatment_rand*schools$open)/sum(schools$treatment_rand)
- sum(schools$control_rand*schools$open)/sum(schools$control_rand))
}
schools$control = 1-schools$treatment
actual_stat <- sum(schools$treatment*schools$open)/sum(schools$treatment) - sum(schools$control*schools$open)/sum(schools$control)
sum(abs(simul_stat) >= actual_stat)/NROW(simul_stat)
View(schools)
chooseMatrix(98,49)
round(actual_stat,digit=4)
?nrow
sum(abs(simul_stat) >= actual_stat)/NROW(simul_stat)
ate <- actual_stat
ate
control_mean <- sum(schools$control*schools$open)/sum(schools$control)
treatment_mean <- sum(schools$treatment*schools$open)/sum(schools$treatment)
s_c <- (1/(sum(schools$control)-1))*sum(((schools$open-control_mean)*schools$control)^2)
s_t <- (1/(sum(schools$treatment)-1))*sum(((schools$open-treatment_mean)*schools$treatment)^2)
Vneyman <- (s_c/sum(schools$control) + s_t/sum(schools$treatment))
print(sqrt(Vneyman))
round(sqrt(Vneyman))
round(sqrt(Vneyman),digit=4)
print(actual_stat/sqrt(Vneyman))
print(round(actual_stat/sqrt(Vneyman))
print(round(actual_stat/sqrt(Vneyman)))
print(round(actual_stat/sqrt(Vneyman),digit=2)
print(round(actual_stat/sqrt(Vneyman),digit=2))
print(actual_stat-1.96*sqrt(Vneyman))
print(actual_stat+1.96*sqrt(Vneyman))
?t.test
t_test(actual_stat/sqrt(Vneyman))
t.test(actual_stat/sqrt(Vneyman))
t.test(actual_stat/sqrt(Vneyman).mu=0.1969)
t.test(actual_stat/sqrt(Vneyman),mu=0.1969)
2*pt(-abs(actual_stat/sqrt(Vneyman)),df=100000)
2*pt(abs(actual_stat/sqrt(Vneyman)),df=100000)
2*pt(-abs(actual_stat/sqrt(Vneyman)),df=1000)
2*pt(-abs(actual_stat/sqrt(Vneyman)),df=98)
round(actual_stat/2,digit=3)
?ftest
?qf
pf(0.05,500,5)
pf(5,500,5)
198.3-183.2
pf(5,2,495)
pf(5,2,496)
pf(5,2,600)
pf(5,2,500)
pf(5,500,2)
pf(0.05,2,500)
(198.3-183.2)/2
183.02/495
7.55/0.3697374
pf(5%,2,494)
pf(5,2,494)
pf(0.05,2,494)
qf(5,2,494)
qf(0.05,2,494)
qf(0.95,2,494)
qf(0.05,2,494,lower.tail=FALSE)
swd
pwd
?read.csv
read.csv('d:\quant\Data Analysis for Social Science\ nlsw88.csv')
read.csv('d:\\quant\Data Analysis for Social Science\ nlsw88.csv')
read.csv('d:\\quant\\Data Analysis for Social Science\\nlsw88.csv')
nlsw88=read.csv('d:\\quant\\Data Analysis for Social Science\\nlsw88.csv')
?lm
summary(nlsw88)
ywage<-log(nlsw88['lwage'])
xmodel<-nlsw88['yrs_school']
lmfit<-lm(ywage~xmodel)
ywage
ywage[:5]
ywage(:5)
ywage
xmodel
type(nlsw88)
?nlsw88
ywage(1,2)
ywage
ywage[:,2]
ywage*2
View(xmodel)
View(xmodel)
ywage(:,1)
ywage(1)
ywage[:,1]
ywage[1,1]
ywage[2,1]
ywage[:,1]
ywage[1:end,1]
View(df)
ywage[1:2246,1]
ywage<-ywage[1:2246,1]
ywage
xmodel<-xmodel[1:2246,1]
lmfit<-lm(ywage~xmodel)
summary(lmfit)
View(nlsw88)
ywag=nlsw88['lwage']
ywage[0:,1]
ywage[0:1]
ywage[0,1]
ywage
ywag
ywag[0,1]
ywag[1,1]
ywag<-ywag[1:2246,1]
fitted<-lm(log(ywag)~xmodel)
summary(fitted)
coefficients(fitted)
coef(fitted)
anova(fitted)
confint(fitted,level=0.95)
confint(fitted,level=0.90)
fitted<-lm(ywag~xmodel)
confint(fitted,level=0.90)
summary(fitted)
residuals(fitted)
sum(residuals(fitted))
fitted2<-lm(ywage,black)
black<-nlsw88['black']
black<-black[1:2246,1]
fitted2<-lm(ywage,black)
black
fitted2<-lm(ywage,black)
fitted2<-lm(ywage~black)
summary(fitted2)
mean(ywag(black==1))
ywag(black==1)
ywag[black==1]
mean(ywag[black==1])
mean(ywag[black==0])
summary(fitted2)
mean(ywag)
mb<-mean(ywag[black==1])
mo<-mean(ywag[black==0])
mb-mo
fitted2<-lm(ywage~black)
summary(fitted2)
fitted2<-lm(ywag~black)
summary(fitted2)
ttl<-nlsw88['ttl_exp']
ttl<-ttl[1:2246,1]
fiited3<-lm(ywag~xmodel+ttl)
summary(fiited3)
restr=xmodel+ttl
fitted4<-lm(ywag~restr)
summary(fitted4)
restr=xmodel+2*ttl
fitted4<-lm(ywag~restr)
summary(fitted4)
anova(fitted4)
anove(fiited3)
anova(fiited3)
((585.09-543.20)/2)/(585.09/(2243))
((585.09-543.20)/2)/(585.09/(2244))
rm(list = ls())
number_of bidders<-2
number_of_bidders<-2
number_of_simulations<-1000
set.seed(1)
valuations1<-matrix(runif(number_of_bidders*number_of_simulations,min=0,max=1),nrow=number_of_simulations)
max(valuations1)
N<-number_of_bidders
V<-10000
set.seed(5)
valuations<-matrix(runif(N*V,min=0,max=1),nrow=V)
maximum_valuation<-apply(valuations,1,max)
optimal_price<-1/((N+1)^(1/N))
expected_revenue<-(N/(N+1))*1/((N+1)^(1/N))
revenue<-optimal_price*(maximum_valuation>=optimal_price)
mean(revenue)
expected_revenue
V<-10
valuations<-matrix(runif(N*V,min=0,max=1),nrow=V)
maximum_valuation<-apply(valuations,1,max)
optimal_price<-1/((N+1)^(1/N))
expected_revenue<-(N/(N+1))*1/((N+1)^(1/N))
revenue<-optimal_price*(maximum_valuation>=optimal_price)
mean(revenue)
expected_revenue
PNORM(22,20,9)
pnorm(22,20,9)
1-pnorm(22,20,9)
?pnorm
1-pnorm(22,20,9,lower.tail=FALSE)
1-pnorm(22,20,9,lower.tail=TRUE)
pnorm(22,20,9,lower.tail=FALSE)
pnorm(22,20,9,lower.tail=FALSE)^3
qnorm(0.975)
qnorm(0.975,4.3,2.7)
qnorm(0.025,4.3,2.7)
sqrt(2.7)
qnorm(0.025,4.3,sqrt(2.7)
)
qnorm(0.025,4.3,sqrt(2.7))
qnorm(0.975,4.3,sqrt(2.7))
?qt
qt(0.975,9)
qt(0.975,9)*sqrt(2.7)/sqrt(10)
qt(0.975,19)*sqrt(2.7)/sqrt(20)
qt(0.975,14)*sqrt(2.7)/sqrt(15)
qt(0.975,11)*sqrt(2.7)/sqrt(12)
qt(0.975,12)*sqrt(2.7)/sqrt(13)
qt(0.975,12)*sqrt(2.7)/sqrt(50)
qt(0.975,12)*sqrt(2.7)/sqrt(55)
qt(0.975,12)*sqrt(2.7)/sqrt(52)
qt(0.975,52)*sqrt(2.7)/sqrt(52)
qt(0.975,39)*sqrt(2.7)/sqrt(40)
qt(0.975,43)*sqrt(2.7)/sqrt(44)
qt(0.975,42)*sqrt(2.7)/sqrt(43)
?fisher.test
immunized<-matrix(c(0.85,0.99,1,0.76,.26,.45,.97,.72),nrow=2,list(c("treatment","control")))
immunized<-matrix(c(0.85,0.99,1,0.76,0.26,0.45,0.97,0.72),nrow=2,list(c("treatment","control")))
immunized<-matrix(c(0.85,0.99,1,0.76,0.26,0.45,0.97,0.72),nrow=2,dimnames=list(c("treatment","control")))
immunized
immunized<-matrix(c(0.85,0.26,0.99,0.45,1,0.97,0.76,0.72),nrow=2,dimnames=list(c("treatment","control")))
immunized
fisher.test(immunized)
immunized<-matrix(c(85,26,99,45,100,97,76,72),nrow=2,dimnames=list(c("treatment","control")))
fisher.test(immunized)
immunized
immunized''
immunized'
immunized''
immunized'
immun<-immunized''
immun<-t(immunized)
immun
fisher.test(immun)
summary(fisher.test(immun))
erms <- chooseMatrix(8,4)
perms <- chooseMatrix(8,4)
library(perm)
perms <- chooseMatrix(8,4)
A <- matrix(c(0.85, 0.99, 1.0, 0.76, 0.26, 0.450, 0.97, 0.72), nrow=8, ncol=1, byrow=TRUE)
A
treatment_avg <- (1/4)*perms%*%A
control_avg <- (1/4)*(1-perms)%*%A
test_statistic <- abs(treatment_avg-control_avg)
rownumber <- apply(apply(perms, 1,
function(x) (x == c(1, 1, 1, 1, 0,0, 0, 0))),
2, sum)
rownumber <- (rownumber == 8)
observed_test <- test_statistic[rownumber == TRUE]
a
A
B=c(1, 1, 1, 1, 0,0, 0, 0)
B
A*B
sum(A*B)
sum(A*B)/4
sum(A*(1-B)/4
sum(A*(1-B))/4
test_statistic
perms
treatment_avg
control_avg
test_statistic
rownumber
observed_test
larger_than_observed <- (test_statistic >= observed_test)
sum(larger_than_observed)
=8/70
8/70
1/70
2/70
immunized<-matrix(c(85,99,100,76,26,45,97,72),nrow=2,dimnames=list(c("treatment","control")))
fisher.test((immunized))
-0.0081/0.0024
?t.test()
?qt
qt(0.9,49080)
dt(3.375,0.9)
dt(3.375,0.95)
qt(0.95,49080)
qt(0.95,49080)*0.0024
-0.0081+qt(0.95,49080)*0.0024
-0.0081-qt(0.95,49080)*0.0024
qian<-read.csv("qian.csv")
setwd("D:\\Quant\\Data Analysis for Social Science")
qian<-read.csv("qian.csv")
nrow(qian)
mean(qian$biryr)
summary(qian)
qian$post<-qian$biryr>=1979
summary(qian)
qian$post_teasown<-qian$teasown*qian$post
summary(qian)
sum(qian$post_teasown)
sum(qian$post)
?lm
lm(sex~teason+post+post_teasown,data=qian)
lm(sex~teasown+post+post_teasown,data=qian)
lmmodel<-lm(sex~teasown+post+post_teasown,data=qian)
summary(lmmodel)
